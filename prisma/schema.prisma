generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserID        String  @id @default(uuid())
  UserName      String
  UserIcon      String
  Organisation  Organisation[]
  Answer        Answer[]
  UserTag       UserTag[] 
  Article       Article[] 
}

model Issue {
  IssueID         String @id @default(uuid())
  IssueName       String
  IsuueDetail     String
  Visibility      Boolean
  PostUserID      String
  explanation     String
  created_at      DateTime
  Update_at       DateTime
  OrganisationID  String
  OptionID        String
  IssueTag        IssueTag[]
  Organisation    Organisation []
  Answer          Answer[]
  Option          Option @relation(fields: [OptionID], references: [OptionID])
}

model Option {
  OptionID      String @id @default(uuid())
  Option1       String
  Option2       String
  Option3       String
  Option4       String
  CorrectOption Int
  Issue         Issue[]
}

model Article {
  ArticleID       String @id @default(uuid())
  ArticleTitle    String
  ArticleLink     String
  ArticleUserName String
  User            User @relation(fields: [ArticleUserName], references: [UserID])
  ArticleTag      ArticleTag[]
  Organisation    Organisation[]
}

model Answer {
  AnswerID       String @id @default(uuid())
  Decision       Boolean
  IssueID        String
  AnserUserID    String
  selectOptionID String
  User           User @relation(fields: [AnserUserID], references: [UserID])
  Issue          Issue @relation(fields: [IssueID], references: [IssueID])
}

model Organisation {
  OrganisationID String @id @default(uuid())
  OrganisationName String
  discruption     String
  authority       String
  UserID          String
  ArticleID       String
  IssueID         String
  User            User @relation(fields: [UserID], references: [UserID])
  Article         Article @relation(fields: [ArticleID], references: [ArticleID])
  Issue           Issue @relation(fields: [IssueID], references: [IssueID])
}

model Tag {
  TagID      String @id @default(uuid())
  tagName    String
  IssueTag   IssueTag[]
  ArticleTag ArticleTag[]
  UserTag    UserTag []
}

model UserTag {
  UserTagID String @id @default(uuid())
  UserID    String
  TagID     String
  User      User @relation(fields: [UserID], references: [UserID])
  Tag       Tag @relation(fields: [TagID], references: [TagID])
}

model ArticleTag {
  ArticleTagID String @id @default(uuid())
  ArticleID    String
  TagID        String
  Article      Article @relation(fields: [ArticleID], references: [ArticleID])
  Tag          Tag @relation(fields: [TagID], references: [TagID])
}

model IssueTag {
  IssueTagID String @id @default(uuid())
  IssueID    String
  TagID      String
  Issue      Issue @relation(fields: [IssueID], references: [IssueID])
  Tag        Tag @relation(fields: [TagID], references: [TagID])
}